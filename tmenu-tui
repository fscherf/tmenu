#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from subprocess import CalledProcessError, check_output
from contextlib import suppress
from enum import Enum
import termios
import shutil
import signal
import sys
import tty
import os

SESSION_PATH = 'session'
COMMAND_PATH = 'command'


class Terminal:
    class EVENTS(Enum):
        KEY = 'KEY'
        RESIZE = 'RESIZE'

    class KEYS(Enum):
        ESCAPE = '\x1b'
        CTRL_C = '\x03'
        ENTER = '\r'
        ARROW_UP = '\x1b[A'
        ARROW_DOWN = '\x1b[B'
        ARROW_RIGHT = '\x1b[C'
        ARROW_LEFT = '\x1b[D'

    KEYBOARD_UP_KEYS = [
        KEYS.ARROW_UP,
        'n',  # dvorak vi
        'k',  # vi
    ]

    KEYBOARD_DOWN_KEYS = [
        KEYS.ARROW_DOWN,
        't',  # dvorak vi
        'j',  # vi
    ]

    KEYBOARD_ENTER_KEYS = [
        KEYS.ENTER,
    ]

    KEYBOARD_QUIT_KEYS = [
        KEYS.CTRL_C,
        'q',
    ]

    def __init__(self):
        self.events = []

        # setup sigwinch signal handler
        signal.signal(signal.SIGWINCH, self.handle_resize)

    # events ##################################################################
    def handle_alarm(self, signum, frame):
        raise TimeoutError()

    def handle_resize(self, signum, frame):
        self.events.append(self.EVENTS('RESIZE'))

    def get_event(self, timeout=0.01):
        buffer = ''

        # set stdin into raw mode
        file_descriptor = sys.stdin.fileno()
        old_settings = termios.tcgetattr(file_descriptor)
        tty.setraw(file_descriptor)

        # setup alarm signal handler
        signal.signal(signal.SIGALRM, self.handle_alarm)

        try:
            while True:
                # check for events
                if self.events:
                    event = self.events.pop()

                    # resize
                    if event == self.EVENTS.RESIZE:
                        return event, self.get_size()

                    # misc events
                    return event, None

                # check if key was pressed
                if buffer:
                    try:
                        return self.EVENTS('KEY'), self.KEYS(buffer)

                    except ValueError:
                        return self.EVENTS('KEY'), buffer

                # setup timer
                signal.setitimer(signal.ITIMER_REAL, timeout)

                with suppress(TimeoutError):
                    # read from stdin into buffer
                    while True:
                        buffer += sys.stdin.read(1)

        finally:
            # clear alarm
            signal.alarm(0)

            # reset stdin to standard setting
            termios.tcsetattr(
                file_descriptor,
                termios.TCSADRAIN,
                old_settings,
            )

        return buffer

    # output ##################################################################
    def get_size(self):
        terminal_size = shutil.get_terminal_size()

        return (
            terminal_size.columns,
            terminal_size.lines,
        )

    def save_cursor_position(self):
        print('\033[s', end='')

    def reset_cursor_position(self):
        print('\033[u', end='')

    def clear(self):
        os.system('clear')

    def reset(self):
        self.reset_cursor_position()

    def color(self, string, color='', background='', style='', reset=True):
        reset_string = '\033[00m' if reset else ''

        if not string and reset:
            return reset_string

        if style:
            style = {
                'bright': '1',
                'underlined': '2',
                'negative': '3',
            }[style]

        if color:
            color = {
                'black': '30',
                'red': '31',
                'green': '32',
                'yellow': '33',
                'blue': '34',
                'magenta': '35',
                'cyan': '36',
                'white': '37',
            }[color]

            if style:
                color = ';{}'.format(color)

        if background:
            background = {
                'black': '40',
                'red': '41',
                'green': '42',
                'yellow': '43',
                'blue': '44',
                'magenta': '45',
                'cyan': '46',
                'white': '47',
            }[background]

            if color:
                background = ';{}'.format(background)

        return '\033[{}{}{}m{}{}'.format(
            style,
            color,
            background,
            string,
            reset_string,
        )


def tmux_list_sessions():
    scratchpad_running = False
    sessions = []

    try:
        output = check_output(['tmux', 'list-sessions']).decode()

        for line in output.splitlines():
            session = line.strip().split(':')[0]

            if session == '0':  # reserved for scratchpad
                scratchpad_running = True

                continue

            sessions.append(session)

    except CalledProcessError:
        # tmux returns 1 if no sessions are running

        return scratchpad_running, sessions

    return scratchpad_running, sorted(sessions)


if __name__ == '__main__':
    terminal = Terminal()

    terminal.save_cursor_position()

    # setup state
    scratchpad_running, sessions = tmux_list_sessions()
    terminal_width, terminal_height = terminal.get_size()
    cursor = 0

    with open(SESSION_PATH, 'r') as f:
        tmux_selected_session = f.read()

        if tmux_selected_session in sessions:
            cursor = sessions.index(tmux_selected_session)

    session = ''
    command = ''

    # main loop
    while True:

        # print tui
        terminal.reset()

        print(
            terminal.color(
                'TMenu v0.1 {}\n'.format(os.getcwd()),
                style='bright',
            )
        )

        # scratchpad running
        if not scratchpad_running:
            print(
                terminal.color(
                    '  no running scratchpad',
                    color='red',
                    style='bright',
                ),
            )

        # list sessions
        if sessions:
            if not sessions or not scratchpad_running:
                print()

            for index, session_name in enumerate(sessions):
                line = '  {}{}'.format(
                    session_name,
                    (terminal_width - len(session_name) - 2) * ' '
                )

                # cursor line
                if index == cursor:
                    print(
                        terminal.color(line, color='black', background='white')
                    )

                # regular line
                else:
                    print(terminal.color(line, color='white'))

        # show *no sessions*
        else:
            print(
                terminal.color(
                    '  no running sessions',
                    color='red',
                    style='bright',
                )
            )

        # prompt
        print()
        print('q exit')
        print('0 scratch pad')
        print('1 start session')
        print('2 start shell')

        if sessions:
            print('3 kill session')

        print('4 kill server')
        print('\n> ', end='')

        # wait for terminal event
        event, event_payload = terminal.get_event()

        # terminal got resized
        if event == Terminal.EVENTS.RESIZE:
            terminal.clear()
            terminal_width, terminal_height = event_payload

            continue

        # keyboard input
        else:
            keyboard_input = event_payload

        # disable cursor if no sessions are running
        if not sessions and keyboard_input not in ('q', '0', '1', '2', '4'):
            continue

        if keyboard_input in Terminal.KEYBOARD_UP_KEYS:
            cursor -= 1

        elif keyboard_input in Terminal.KEYBOARD_DOWN_KEYS:
            cursor += 1

        elif keyboard_input == 'g':
            cursor = 0

        elif keyboard_input == 'G':
            cursor = len(sessions) - 1

        elif keyboard_input in Terminal.KEYBOARD_ENTER_KEYS:
            session = sessions[cursor]

            break

        elif keyboard_input in Terminal.KEYBOARD_QUIT_KEYS:
            command = 'quit'

            break

        elif keyboard_input == '0':
            command = 'scratchpad'

            break

        elif keyboard_input == '1':
            command = 'start-session'

            break

        elif keyboard_input == '2':
            command = 'shell'

            break

        elif keyboard_input == '3':
            session = sessions[cursor]
            command = 'kill-session'

            break

        elif keyboard_input == '4':
            command = 'kill-server'

            break

        # adjust cursor
        if cursor == -1:
            cursor = len(sessions) - 1

        elif cursor > len(sessions) - 1:
            cursor = 0

    # write result
    with open(SESSION_PATH, 'w+') as f:
        f.write(session)

    with open(COMMAND_PATH, 'w+') as f:
        f.write(command)
